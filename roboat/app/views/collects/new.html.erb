<div class="row">
  <h1>Nova Coleta</h1>
  <%= link_to 'Back', collects_path %>
</div>

<div class="row">

  <div class="col-md-6">
    <%= render 'form', collect: @collect %>
  </div>

  <div class="col-md-6">

    <div id="content">

      <div id="floating-panel">
        <input onclick="deleteLastMarker();" type=button value="Deletar Ultima Localização">
      </div>

      <div id="map"></div>
    </div>
  </div>

</div>



<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAaQjjH5bKQZa5VQtSm6gUIIxD8xJRN8ss&callback=initMap"
type="text/javascript"></script>
<script>
var map;
var markers = [];
var latitude =  -15.820315;
var longitude = -47.832984;
var roboat_marker;
var labels = '123';
var labelIndex = 0;
var image = "<%=asset_path('roboat_icon.png')%>";

function setValuesOnFields(amountOfMarkers) {
  amountOfMarkers--;
  $("#collect_measures_attributes_" + amountOfMarkers + "_latitude").val(markers[markers.length - 1].getPosition().lat());
  $("#collect_measures_attributes_" + amountOfMarkers + "_longitude").val(markers[markers.length - 1].getPosition().lng());
}

function setValuesOnMap(amountOfMarkers) {

    //amountOfMarkers--;

    console.log("amountOfMarkers = " + amountOfMarkers);

    var lat = $("#collect_measures_attributes_" + markers.length + "_latitude").val();
    var lng = $("#collect_measures_attributes_" + markers.length + "_longitude").val();

    var latitude = parseFloat(lat);
    var longitude = parseFloat(lng);

    addMarker({lat: parseFloat(latitude), lng: parseFloat(longitude)});
}

function initMap() {
  var lat_lng = {lat: -15.820315, lng: -47.832984};
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 16,
    center: lat_lng,
    mapTypeId: google.maps.MapTypeId.TERRAIN
  });
  // This event listener will call addMarker() when the map is clicked.
  map.addListener('click', function (event) {
    addMarker(event.latLng);
    setValuesOnFields(markers.length);
  });
  var infoWindow = new google.maps.InfoWindow({map: map});

  var roboat_lat_lng = {lat: latitude, lng: longitude};

  roboat_marker = new google.maps.Marker({
    position: roboat_lat_lng,
    map: map,
    icon: image,
    title: 'Roboat!'
  });

  // every 3 seconds
  setInterval(changeRoboatPosition, 3);
}

function changeRoboatPosition() {
  getRoboatNewLocation();

  //console.log("hello: "+ latitude);

  roboat_marker.setPosition( new google.maps.LatLng(latitude , longitude) );
}
function getRoboatNewLocation() {
  latitude += 0.000001;
  longitude += 0.000001;
}
function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(browserHasGeolocation ?
    'Error: The Geolocation service failed.' :
    'Error: Your browser doesn\'t support geolocation.');
  }
  // Adds a marker to the map and push to the array.
  function addMarker(location) {
    if (markers.length < 3) {
      var marker = new google.maps.Marker({
        position: location,
        label: labels[markers.length],
        map: map
      });
      markers.push(marker);
    }
  }
  // Deletes all markers in the array by removing references to them.
  function deleteLastMarker() {
    markers[markers.length - 1].setMap(null);
    markers.pop();

    var amountOfMarkers = markers.length;
    $("#collect_measures_attributes_" + amountOfMarkers + "_latitude").val("");
    $("#collect_measures_attributes_" + amountOfMarkers + "_longitude").val("");
  }




  function parseMeasure(measure){
    var raw_measure = Cookies.get(measure);
    var obj_measure = JSON.parse(raw_measure);
    return obj_measure;
  }

  function resetCookies(){
    for (var i = 0; i <= 2; i++) {
      var cookie_measure_name = 'measure_' + i;
      Cookies.set(cookie_measure_name, {
        "id": null,
        "ph": null,
        "turbidity": null,
        "temperature": null,
        "conductivity": null
      });
    }
  }

  function listenCookie(id){
    var measure_name = 'measure_' + id.toString();
    Cookies.onchange(measure_name, function(){
      var obj_measure = parseMeasure(measure_name);
      var ph = obj_measure.ph;
      var turbidity = obj_measure.turbidity;
      var temperature = obj_measure.temperature;
      var conductivity = obj_measure.conductivity;
      $("#collect_measures_attributes_" + id.toString() + "_ph").val(ph);
      $("#collect_measures_attributes_" + id.toString() + "_turbidity").val(turbidity);
      $("#collect_measures_attributes_" + id.toString() + "_temperature").val(temperature);
      $("#collect_measures_attributes_" + id.toString() + "_conductivity").val(conductivity);
    });
  }

  function setMeasureParms(){
    resetCookies();
    for (var i = 0; i <= 2; i++) {
      listenCookie(i);
    }
  }

  function test(){
    Cookies.set('measure_0', {
      "id": 1,
      "ph": 7,
      "turbidity": 4,
      "temperature": 10,
      "conductivity": 7
    });
    Cookies.set('measure_1', {
      "id": 2,
      "ph": 4,
      "turbidity": 5,
      "temperature": 9,
      "conductivity": 9
    });
    Cookies.set('measure_2', {
      "id": 3,
      "ph": 5,
      "turbidity": 9,
      "temperature": 5,
      "conductivity": 8
    });
  }

  $(document).ready(function(){
    setMeasureParms();
  });

  $("#collect_measures_attributes_0_longitude").keyup( function(){

      setValuesOnMap(markers.length);
  });

  $("#collect_measures_attributes_1_longitude").focusout( function(){

    setValuesOnMap(markers.length);
  });

  $("#collect_measures_attributes_2_longitude").focusout( function(){

    setValuesOnMap(markers.length);
  });


  </script>
