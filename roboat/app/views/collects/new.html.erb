<div id="sidebar-wrapper">
  <div class="row">
    <h1>Nova Coleta</h1>
    <div class="col-md-12">
      <%= render 'form', collect: @collect %>
    </div>
  </div>
</div>

<a href="#menu-toggle" class="btn btn-default " id="menu-toggle">
  <span class="glyphicon glyphicon-menu-hamburger" id="menu-icon" aria-hidden="true"></span>
</a>

<input  class="btn btn-xs btn-danger delete-location" onclick="deleteLastMarker();" type=button value="Deletar última localização">

<div id="map"></div>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAaQjjH5bKQZa5VQtSm6gUIIxD8xJRN8ss&callback=initMap"
type="text/javascript"></script>
<script>
var map;
var markers = [];
var latitude =  -15.820315;
var longitude = -47.832984;
var roboat_marker;
var labels = '123';
var labelIndex = 0;
var image = "<%=asset_path('roboat_icon.png')%>";

function setValuesOnFields(amountOfMarkers) {
  amountOfMarkers--;
  $("#collect_measures_attributes_" + amountOfMarkers + "_latitude").val(markers[markers.length - 1].getPosition().lat());
  $("#collect_measures_attributes_" + amountOfMarkers + "_longitude").val(markers[markers.length - 1].getPosition().lng());
}

function initMap() {
  var lat_lng = {lat: -15.820315, lng: -47.832984};
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 16,
    center: lat_lng,
    scrollwheel: false,
    navigationControl: false,
    mapTypeControl: false,
    scaleControl: false,
    mapTypeId: google.maps.MapTypeId.TERRAIN
  });
  // This event listener will call addMarker() when the map is clicked.
  map.addListener('click', function (event) {
    addMarker(event.latLng);
    setValuesOnFields(markers.length);
  });
  var infoWindow = new google.maps.InfoWindow({map: map});

  var roboat_lat_lng = {lat: latitude, lng: longitude};

  roboat_marker = new google.maps.Marker({
    position: roboat_lat_lng,
    map: map,
    icon: image,
    title: 'Roboat!'
  });

  // every 3 seconds
  setInterval(changeRoboatPosition, 3);
}

function editPositionOnMap(marker) {

    var latitude = $("#collect_measures_attributes_" + marker + "_latitude").val();
    var longitude = $("#collect_measures_attributes_" + marker + "_longitude").val();

    if(markers.length === 0 && marker === 0){
        console.log("lentgh = " + markers.length + " marker = " + marker);
        addMarker({lat: parseFloat(latitude), lng: parseFloat(longitude)});
        
    } else if (markers.length > 0 && marker === 0) {
        console.log("lentgh = " + markers.length + " marker = " + marker);
        markers[marker].setPosition( new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude)));
    }

    if (markers.length === 1 && marker === 1) {
        console.log("lentgh = " + markers.length + " marker = " + marker);
        addMarker({lat: parseFloat(latitude), lng: parseFloat(longitude)});

    } else if (markers.length > 1 && marker === 1) {
        console.log("lentgh = " + markers.length + " marker = " + marker);
        markers[marker].setPosition( new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude)));
    }

    if (markers.length === 2 && marker === 2) {
        console.log("lentgh = " + markers.length + " marker = " + marker);
        addMarker({lat: parseFloat(latitude), lng: parseFloat(longitude)});
    } else if (markers.length > 2 && marker === 2) {
        console.log("lentgh = " + markers.length + " marker = " + marker);
        markers[marker].setPosition( new google.maps.LatLng(parseFloat(latitude) , parseFloat(longitude)));
    }
}

function changeRoboatPosition() {

    getRoboatNewLocation();

    roboat_marker.setPosition( new google.maps.LatLng(latitude , longitude));
}

function getRoboatNewLocation() {
  latitude += 0.000001;
  longitude += 0.000001;
}

function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(browserHasGeolocation ?
    'Error: The Geolocation service failed.' :
    'Error: Your browser doesn\'t support geolocation.');
  }
  // Adds a marker to the map and push to the array.
  function addMarker(location) {
    if (markers.length < 3) {
      var marker = new google.maps.Marker({
        position: location,
        label: labels[markers.length],
        map: map
      });
      markers.push(marker);
    }
  }
  // Deletes all markers in the array by removing references to them.
  function deleteLastMarker() {
    markers[markers.length - 1].setMap(null);
    markers.pop();

    var amountOfMarkers = markers.length;
    $("#collect_measures_attributes_" + amountOfMarkers + "_latitude").val("");
    $("#collect_measures_attributes_" + amountOfMarkers + "_longitude").val("");
  }




  function parseMeasure(measure){
    var raw_measure = Cookies.get(measure);
    var obj_measure = JSON.parse(raw_measure);
    return obj_measure;
  }

  function resetCookies(){
    for (var i = 0; i <= 2; i++) {
      var cookie_measure_name = 'measure_' + i;
      Cookies.set(cookie_measure_name, {
        "id": null,
        "ph": null,
        "turbidity": null,
        "temperature": null,
        "conductivity": null
      });
    }
  }

  function listenCookie(id){
    var measure_name = 'measure_' + id.toString();
    Cookies.onchange(measure_name, function(){
      var obj_measure = parseMeasure(measure_name);
      var ph = obj_measure.ph;
      var turbidity = obj_measure.turbidity;
      var temperature = obj_measure.temperature;
      var conductivity = obj_measure.conductivity;
      $("#collect_measures_attributes_" + id.toString() + "_ph").val(ph);
      $("#collect_measures_attributes_" + id.toString() + "_turbidity").val(turbidity);
      $("#collect_measures_attributes_" + id.toString() + "_temperature").val(temperature);
      $("#collect_measures_attributes_" + id.toString() + "_conductivity").val(conductivity);
    });
  }

  function setMeasureParms(){
    resetCookies();
    for (var i = 0; i < 3; i++) {
      listenCookie(i);
    }
  }

  function random(){
    return Math.floor((Math.random() * 10) + 1);
  }

  function test(){
    for (var i = 0; i < 3; i++) {
      var measure_name = 'measure_' + i.toString();
      Cookies.set(measure_name, {
        "id": random(),
        "ph": random(),
        "turbidity": random(),
        "temperature": random(),
        "conductivity": random()
      });
    }
  }

  function openSidebar(){
    $("#wrapper").toggleClass("toggled");
    $("#wrapper").toggleClass("overflow-hidden");
    $("#sidebar-wrapper").toggleClass("padding-30");
    if ($("#menu-icon").hasClass("glyphicon-menu-hamburger")) {
      $("#menu-icon").removeClass("glyphicon-menu-hamburger").toggleClass("glyphicon-remove");
    } else {
      $("#menu-icon").removeClass("glyphicon-remove").toggleClass("glyphicon-menu-hamburger");
    }
  }

  $("#menu-toggle").click(function(e) {
    e.preventDefault();
    openSidebar();
  });

  $(document).ready(function(){
    setMeasureParms();
    openSidebar();
  });

  $("#collect_measures_attributes_0_longitude").focusout( function(){

      console.log("#collect_measures_attributes_0_longitude");
      editPositionOnMap(0);
  });

  $("#collect_measures_attributes_1_longitude").focusout( function(){

      console.log("#collect_measures_attributes_1_longitude");
      editPositionOnMap(1);
  });

  $("#collect_measures_attributes_2_longitude").focusout( function(){

      console.log("#collect_measures_attributes_2_longitude");
      editPositionOnMap(2);
  });


  </script>
